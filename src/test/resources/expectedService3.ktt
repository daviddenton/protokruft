package org.protokruft.example3

import com.mygreat.Interface
import io.grpc.BindableService
import io.grpc.Channel
import java.time.Duration
import java.util.concurrent.TimeUnit

interface CatService : Interface {
    fun getLeg(cat: Example3.Cat): Example3.Leg

    object Grpc {
        object Client {
            operator fun invoke(channel: Channel, timeout: Duration = Duration.ofSeconds(10)):
                    CatService {
                val stub =
                        CatServiceGrpc.newBlockingStub(channel).withDeadlineAfter(timeout.toMillis(),
                        TimeUnit.MILLISECONDS)
                return object : CatService {
                            override fun getLeg(cat: org.protokruft.example3.Example3.Cat):
                                org.protokruft.example3.Example3.Leg = stub.getLeg(cat)
                        }
            }
        }

        object Server {
            operator fun invoke(delegate: CatService): BindableService = object :
                    org.protokruft.example3.CatServiceGrpc.CatServiceImplBase() {
                override fun getLeg(cat: org.protokruft.example3.Example3.Cat, responseObserver:
                    io.grpc.stub.StreamObserver<org.protokruft.example3.Example3.Leg>) {
                    responseObserver.onNext(delegate.getLeg(cat))
                    responseObserver.onCompleted()
                }
            }
        }
    }
}
