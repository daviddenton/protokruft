package org.protokruft.example1

import io.grpc.Channel
import io.grpc.stub.StreamObserver

interface CarService {
    fun getEngine(car: Example1.Car): Example1.Engine

    object Grpc {
        object Client {
            operator fun invoke(channel: Channel): CarService {
                val stub = CarServiceGrpc.newBlockingStub(channel)
                return object : CarService {
                            override fun getEngine(car: org.protokruft.example1.Example1.Car): org.protokruft.example1.Example1.Engine = stub.getEngine(car)
                        }
            }
        }

        class Server(private val delegate: CarService) : CarServiceGrpc.CarServiceImplBase() {
            override fun getEngine(car: Example1.Car, responseObserver: StreamObserver<Example1.Engine>) {
                responseObserver.onNext(delegate.getEngine(car))
                responseObserver.onCompleted()
            }
        }
    }
}
