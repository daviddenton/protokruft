package org.protokruft.example2

import com.mygreat.Interface
import io.grpc.BindableService
import io.grpc.Channel
import java.time.Duration

interface PersonService : Interface {
    fun getAddress(person: Example2.Person): Example2.Address

    object Grpc {
        object Client {
            operator fun invoke(channel: Channel, timeout: Duration = Duration.ofSeconds(10)):
                    PersonService {
                val stub = PersonServiceGrpc.newBlockingStub(channel)
                return object : PersonService {
                            override fun getAddress(person:
                                org.protokruft.example2.Example2.Person):
                                org.protokruft.example2.Example2.Address =
                                stub.withDeadlineAfter(timeout.toMillis(),
                                java.util.concurrent.TimeUnit.MILLISECONDS).getAddress(person)
                        }
            }
        }

        object Server {
            operator fun invoke(delegate: PersonService): BindableService = object :
                    org.protokruft.example2.PersonServiceGrpc.PersonServiceImplBase() {
                override fun getAddress(person: org.protokruft.example2.Example2.Person,
                    responseObserver:
                    io.grpc.stub.StreamObserver<org.protokruft.example2.Example2.Address>) {
                    responseObserver.onNext(delegate.getAddress(person))
                    responseObserver.onCompleted()
                }
            }
        }
    }
}
