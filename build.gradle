buildscript {
    ext.kotlin_version = '1.3.10'
    ext.grpc_version = '1.15.1'

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.6'
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.6"
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:2.2.+'
    }
}

plugins {
    id 'java-gradle-plugin'
    id "com.jfrog.bintray" version "1.7.3"
    id 'net.saliman.cobertura' version '2.4.0'
    id 'com.github.kt3k.coveralls' version '2.8.1'
}

repositories {
    mavenCentral()
    jcenter()
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'maven'
apply plugin: 'java-gradle-plugin'
apply plugin: 'net.saliman.cobertura'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'
apply plugin: 'com.google.protobuf'
apply plugin: 'provided-base'

version = project.hasProperty('releaseVersion') ? project.releaseVersion : '0.0.1'
group = 'org.protokruft'
archivesBaseName = 'protokruft'
description = 'Kill all (Protobuf) builders!'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

compileKotlin.dependsOn('generateProto')

compileKotlin.kotlinOptions.jvmTarget = "1.8"
compileTestKotlin.kotlinOptions.jvmTarget = "1.8"

test {
    // Always run the tests
    outputs.upToDateWhen { false }

    // Turn on some console logging
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        stackTraceFilters "entryPoint"
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text =
                file('out/production/classes').absolutePath + "\n" +
                sourceSets.main.runtimeClasspath.join("\n")
    }
}

cobertura {
    coverageFormats = ['html', 'xml']
    coverageDirs = ["${projectDir}/build/classes/kotlin/main"]
    coverageSourceDirs = ["${projectDir}/src/main/kotlin"]
}

dependencies {
    compile gradleApi()

    provided('com.google.protobuf:protobuf-gradle-plugin:0.8.5') {
        exclude group: "com.google.guava"
    }
    compile "org.reflections:reflections:0.9.11"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile 'com.google.protobuf:protobuf-java:3.6.1'
    compile "io.grpc:grpc-protobuf:$grpc_version"
    compile "io.grpc:grpc-stub:$grpc_version"
    compile "io.grpc:grpc-core:$grpc_version"
    compile (group: 'com.squareup', name: 'kotlinpoet', version: '1.0.0-RC3') {
        exclude group: "org.jetbrains.kotlin"
    }
    compile 'com.google.guava:guava:23.0'

    testCompile 'junit:junit:4.12'
    testCompile 'com.natpryce:hamkrest:1.3.0.0'
    testCompile "commons-io:commons-io:2.6"
    testCompile gradleTestKit()
    testRuntime files(createClasspathManifest)
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.0.0'
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:$grpc_version"
        }
    }
    generateProtoTasks {
        ofSourceSet('main')*.plugins {
            grpc {}
        }
        ofSourceSet('test')*.plugins {
            grpc {}
        }
    }
}

sourceSets {
    main {
        proto {
            srcDirs += "src/main/proto"
        }
    }
    test {
        java {
            srcDirs += file("${protobuf.generatedFilesBaseDir}/main/java")
            srcDirs += file("${protobuf.generatedFilesBaseDir}/main/grpc")
        }
        kotlin {
            srcDirs += file("src/test/kotlin")
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName

            pom.withXml {
                asNode().appendNode('name', archivesBaseName)
                asNode().appendNode('description', description)
                asNode().appendNode('url', 'http://' + archivesBaseName + '.github.io')
                asNode().appendNode('developers').appendNode('developer').
                        appendNode('name', 'David Denton').parent().
                        appendNode('email', 'david@http4k.org')
                asNode().appendNode('scm').
                        appendNode('url', 'git@github.com:daviddenton/' + archivesBaseName + '.git').parent().
                        appendNode('connection', 'scm:git:git@github.com:daviddenton/' + archivesBaseName + '.git').parent().
                        appendNode('developerConnection', 'scm:git:git@github.com:daviddenton/' + archivesBaseName + '.git')
                asNode().appendNode('licenses').appendNode('license').
                        appendNode('name', 'Apache License, Version 2.0').parent().
                        appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.html')
            }
            from components.java

            artifact sourcesJar
            artifact javadocJar
        }
    }
}

bintray {
    user = 'daviddenton'
    key = project.hasProperty('bintrayKey') ? project.bintrayKey : 'BINTRAYKEY'

    publications = ['mavenJava']
    dryRun = false
    publish = true
    pkg {
        repo = 'maven'
        name = archivesBaseName
        desc = description
        websiteUrl = 'https://github.com/daviddenton/' + archivesBaseName
        issueTrackerUrl = 'https://github.com/daviddenton/' + archivesBaseName + '/issues'
        vcsUrl = 'https://github.com/daviddenton/' + archivesBaseName + '.git'
        licenses = ['Apache-2.0']
        labels = []
        publicDownloadNumbers = false
        version {
            name = project.version
        }
    }
}